// Autogenerated Schema file for BuildDistAppV1
import * as c from "https://deno.land/x/kubernetes_apis@v0.3.2/common.ts";

import * as MetaV1 from "https://deno.land/x/kubernetes_apis@v0.3.2/builtin/meta@v1/structs.ts";
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

export interface Build {
  apiVersion?: "build.danopia.net/v1";
  kind?: "Build";
  spec?: {
    completionDeadlineSeconds?: number | null;
    nodeSelector?: Record<string,string> | null;
    output?: {
      imageLabels?: Array<{
        name: string;
        value?: string | null;
      }> | null;
      pushSecret?: {
        name?: string | null;
      } | null;
      to?: {
        apiVersion?: string | null;
        fieldPath?: string | null;
        kind?: string | null;
        name?: string | null;
        namespace?: string | null;
        resourceVersion?: string | null;
        uid?: string | null;
      } | null;
    } | null;
    postCommit?: {
      args?: Array<string> | null;
      command?: Array<string> | null;
      script?: string | null;
    } | null;
    resources?: {
      limits?: Record<string,string> | null;
      requests?: Record<string,string> | null;
    } | null;
    revision?: {
      git?: {
        author?: {
          email?: string | null;
          name?: string | null;
        } | null;
        commit?: string | null;
        committer?: {
          email?: string | null;
          name?: string | null;
        } | null;
        message?: string | null;
      } | null;
      type: string;
    } | null;
    serviceAccount?: string | null;
    source?: {
      binary?: {
        asFile?: string | null;
      } | null;
      configMaps?: Array<{
        configMap: {
          name?: string | null;
        };
        destinationDir?: string | null;
      }> | null;
      contextDir?: string | null;
      dockerfile?: string | null;
      git?: {
        httpProxy?: string | null;
        httpsProxy?: string | null;
        noProxy?: string | null;
        ref?: string | null;
        uri: string;
      } | null;
      images?: Array<{
        as?: Array<string> | null;
        from: {
          apiVersion?: string | null;
          fieldPath?: string | null;
          kind?: string | null;
          name?: string | null;
          namespace?: string | null;
          resourceVersion?: string | null;
          uid?: string | null;
        };
        paths?: Array<{
          destinationDir: string;
          sourcePath: string;
        }> | null;
        pullSecret?: {
          name?: string | null;
        } | null;
      }> | null;
      secrets?: Array<{
        destinationDir?: string | null;
        secret: {
          name?: string | null;
        };
      }> | null;
      sourceSecret?: {
        name?: string | null;
      } | null;
      type: string;
    } | null;
    strategy: {
      customStrategy?: {
        buildAPIVersion?: string | null;
        env?: Array<{
          name: string;
          value?: string | null;
          valueFrom?: {
            configMapKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
            fieldRef?: {
              apiVersion?: string | null;
              fieldPath: string;
            } | null;
            resourceFieldRef?: {
              containerName?: string | null;
              divisor?: string | null;
              resource: string;
            } | null;
            secretKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
          } | null;
        }> | null;
        exposeDockerSocket?: boolean | null;
        forcePull?: boolean | null;
        from: {
          apiVersion?: string | null;
          fieldPath?: string | null;
          kind?: string | null;
          name?: string | null;
          namespace?: string | null;
          resourceVersion?: string | null;
          uid?: string | null;
        };
        pullSecret?: {
          name?: string | null;
        } | null;
        secrets?: Array<{
          mountPath: string;
          secretSource: {
            name?: string | null;
          };
        }> | null;
      } | null;
      dockerStrategy?: {
        buildArgs?: Array<{
          name: string;
          value?: string | null;
          valueFrom?: {
            configMapKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
            fieldRef?: {
              apiVersion?: string | null;
              fieldPath: string;
            } | null;
            resourceFieldRef?: {
              containerName?: string | null;
              divisor?: string | null;
              resource: string;
            } | null;
            secretKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
          } | null;
        }> | null;
        dockerfilePath?: string | null;
        env?: Array<{
          name: string;
          value?: string | null;
          valueFrom?: {
            configMapKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
            fieldRef?: {
              apiVersion?: string | null;
              fieldPath: string;
            } | null;
            resourceFieldRef?: {
              containerName?: string | null;
              divisor?: string | null;
              resource: string;
            } | null;
            secretKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
          } | null;
        }> | null;
        forcePull?: boolean | null;
        from?: {
          apiVersion?: string | null;
          fieldPath?: string | null;
          kind?: string | null;
          name?: string | null;
          namespace?: string | null;
          resourceVersion?: string | null;
          uid?: string | null;
        } | null;
        imageOptimizationPolicy?: string | null;
        noCache?: boolean | null;
        pullSecret?: {
          name?: string | null;
        } | null;
      } | null;
      jenkinsPipelineStrategy?: {
        env?: Array<{
          name: string;
          value?: string | null;
          valueFrom?: {
            configMapKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
            fieldRef?: {
              apiVersion?: string | null;
              fieldPath: string;
            } | null;
            resourceFieldRef?: {
              containerName?: string | null;
              divisor?: string | null;
              resource: string;
            } | null;
            secretKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
          } | null;
        }> | null;
        jenkinsfile?: string | null;
        jenkinsfilePath?: string | null;
      } | null;
      sourceStrategy?: {
        env?: Array<{
          name: string;
          value?: string | null;
          valueFrom?: {
            configMapKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
            fieldRef?: {
              apiVersion?: string | null;
              fieldPath: string;
            } | null;
            resourceFieldRef?: {
              containerName?: string | null;
              divisor?: string | null;
              resource: string;
            } | null;
            secretKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
          } | null;
        }> | null;
        forcePull?: boolean | null;
        from: {
          apiVersion?: string | null;
          fieldPath?: string | null;
          kind?: string | null;
          name?: string | null;
          namespace?: string | null;
          resourceVersion?: string | null;
          uid?: string | null;
        };
        incremental?: boolean | null;
        pullSecret?: {
          name?: string | null;
        } | null;
        scripts?: string | null;
      } | null;
      type: string;
    };
    triggeredBy?: Array<{
      bitbucketWebHook?: {
        revision?: {
          git?: {
            author?: {
              email?: string | null;
              name?: string | null;
            } | null;
            commit?: string | null;
            committer?: {
              email?: string | null;
              name?: string | null;
            } | null;
            message?: string | null;
          } | null;
          type: string;
        } | null;
        secret?: string | null;
      } | null;
      genericWebHook?: {
        revision?: {
          git?: {
            author?: {
              email?: string | null;
              name?: string | null;
            } | null;
            commit?: string | null;
            committer?: {
              email?: string | null;
              name?: string | null;
            } | null;
            message?: string | null;
          } | null;
          type: string;
        } | null;
        secret?: string | null;
      } | null;
      githubWebHook?: {
        revision?: {
          git?: {
            author?: {
              email?: string | null;
              name?: string | null;
            } | null;
            commit?: string | null;
            committer?: {
              email?: string | null;
              name?: string | null;
            } | null;
            message?: string | null;
          } | null;
          type: string;
        } | null;
        secret?: string | null;
      } | null;
      gitlabWebHook?: {
        revision?: {
          git?: {
            author?: {
              email?: string | null;
              name?: string | null;
            } | null;
            commit?: string | null;
            committer?: {
              email?: string | null;
              name?: string | null;
            } | null;
            message?: string | null;
          } | null;
          type: string;
        } | null;
        secret?: string | null;
      } | null;
      imageChangeBuild?: {
        fromRef?: {
          apiVersion?: string | null;
          fieldPath?: string | null;
          kind?: string | null;
          name?: string | null;
          namespace?: string | null;
          resourceVersion?: string | null;
          uid?: string | null;
        } | null;
        imageID?: string | null;
      } | null;
      message?: string | null;
    }> | null;
  } | null;
  status?: {
    cancelled?: boolean | null;
    completionTimestamp?: c.Time | null;
    conditions?: Array<{
      lastTransitionTime?: c.Time | null;
      lastUpdateTime?: c.Time | null;
      message?: string | null;
      reason?: string | null;
      status: string;
      type: string;
    }> | null;
    config?: {
      apiVersion?: string | null;
      fieldPath?: string | null;
      kind?: string | null;
      name?: string | null;
      namespace?: string | null;
      resourceVersion?: string | null;
      uid?: string | null;
    } | null;
    duration?: number | null;
    logSnippet?: string | null;
    message?: string | null;
    output?: {
      to?: {
        imageDigest?: string | null;
      } | null;
    } | null;
    outputDockerImageReference?: string | null;
    phase: string;
    reason?: string | null;
    stages?: Array<{
      durationMilliseconds?: number | null;
      name?: string | null;
      startTime?: c.Time | null;
      steps?: Array<{
        durationMilliseconds?: number | null;
        name?: string | null;
        startTime?: c.Time | null;
      }> | null;
    }> | null;
    startTimestamp?: c.Time | null;
  } | null;
  metadata?: MetaV1.ObjectMeta | null;
}
export function toBuild(input: c.JSONValue): Build & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "build.danopia.net/v1", "Build"),
    spec: c.readOpt(obj["spec"], toBuild_spec),
    status: c.readOpt(obj["status"], toBuild_status),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
  }}
export function fromBuild(input: Build): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "build.danopia.net/v1", "Build"),
    ...input,
    status: input.status != null ? {
      ...input.status,
      completionTimestamp: input.status.completionTimestamp != null ? c.fromTime(input.status.completionTimestamp) : undefined,
      conditions: input.status.conditions?.map(x => ({
        ...x,
        lastTransitionTime: x.lastTransitionTime != null ? c.fromTime(x.lastTransitionTime) : undefined,
        lastUpdateTime: x.lastUpdateTime != null ? c.fromTime(x.lastUpdateTime) : undefined,
      })),
      stages: input.status.stages?.map(x => ({
        ...x,
        startTime: x.startTime != null ? c.fromTime(x.startTime) : undefined,
        steps: x.steps?.map(x => ({
          ...x,
          startTime: x.startTime != null ? c.fromTime(x.startTime) : undefined,
        })),
      })),
      startTimestamp: input.status.startTimestamp != null ? c.fromTime(input.status.startTimestamp) : undefined,
    } : undefined,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
  }}
export function toBuild_spec(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    completionDeadlineSeconds: c.readOpt(obj["completionDeadlineSeconds"], c.checkNum),
    nodeSelector: c.readOpt(obj["nodeSelector"], x => c.readMap(x, c.checkStr)),
    output: c.readOpt(obj["output"], toBuild_spec_output),
    postCommit: c.readOpt(obj["postCommit"], toBuild_spec_postCommit),
    resources: c.readOpt(obj["resources"], toBuild_spec_resources),
    revision: c.readOpt(obj["revision"], toBuild_spec_revision),
    serviceAccount: c.readOpt(obj["serviceAccount"], c.checkStr),
    source: c.readOpt(obj["source"], toBuild_spec_source),
    strategy: toBuild_spec_strategy(obj["strategy"]),
    triggeredBy: c.readOpt(obj["triggeredBy"], x => c.readList(x, toBuild_spec_triggeredBy)),
  }}
export function toBuild_status(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    cancelled: c.readOpt(obj["cancelled"], c.checkBool),
    completionTimestamp: c.readOpt(obj["completionTimestamp"], c.toTime),
    conditions: c.readOpt(obj["conditions"], x => c.readList(x, toBuild_status_conditions)),
    config: c.readOpt(obj["config"], toBuild_status_config),
    duration: c.readOpt(obj["duration"], c.checkNum),
    logSnippet: c.readOpt(obj["logSnippet"], c.checkStr),
    message: c.readOpt(obj["message"], c.checkStr),
    output: c.readOpt(obj["output"], toBuild_status_output),
    outputDockerImageReference: c.readOpt(obj["outputDockerImageReference"], c.checkStr),
    phase: c.checkStr(obj["phase"]),
    reason: c.readOpt(obj["reason"], c.checkStr),
    stages: c.readOpt(obj["stages"], x => c.readList(x, toBuild_status_stages)),
    startTimestamp: c.readOpt(obj["startTimestamp"], c.toTime),
  }}
export function toBuild_spec_output(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    imageLabels: c.readOpt(obj["imageLabels"], x => c.readList(x, toBuild_spec_output_imageLabels)),
    pushSecret: c.readOpt(obj["pushSecret"], toBuild_spec_output_pushSecret),
    to: c.readOpt(obj["to"], toBuild_spec_output_to),
  }}
export function toBuild_spec_postCommit(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    args: c.readOpt(obj["args"], x => c.readList(x, c.checkStr)),
    command: c.readOpt(obj["command"], x => c.readList(x, c.checkStr)),
    script: c.readOpt(obj["script"], c.checkStr),
  }}
export function toBuild_spec_resources(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    limits: c.readOpt(obj["limits"], x => c.readMap(x, c.checkStr)),
    requests: c.readOpt(obj["requests"], x => c.readMap(x, c.checkStr)),
  }}
export function toBuild_spec_revision(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    git: c.readOpt(obj["git"], toBuild_spec_revision_git),
    type: c.checkStr(obj["type"]),
  }}
export function toBuild_spec_source(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    binary: c.readOpt(obj["binary"], toBuild_spec_source_binary),
    configMaps: c.readOpt(obj["configMaps"], x => c.readList(x, toBuild_spec_source_configMaps)),
    contextDir: c.readOpt(obj["contextDir"], c.checkStr),
    dockerfile: c.readOpt(obj["dockerfile"], c.checkStr),
    git: c.readOpt(obj["git"], toBuild_spec_source_git),
    images: c.readOpt(obj["images"], x => c.readList(x, toBuild_spec_source_images)),
    secrets: c.readOpt(obj["secrets"], x => c.readList(x, toBuild_spec_source_secrets)),
    sourceSecret: c.readOpt(obj["sourceSecret"], toBuild_spec_source_sourceSecret),
    type: c.checkStr(obj["type"]),
  }}
export function toBuild_spec_strategy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    customStrategy: c.readOpt(obj["customStrategy"], toBuild_spec_strategy_customStrategy),
    dockerStrategy: c.readOpt(obj["dockerStrategy"], toBuild_spec_strategy_dockerStrategy),
    jenkinsPipelineStrategy: c.readOpt(obj["jenkinsPipelineStrategy"], toBuild_spec_strategy_jenkinsPipelineStrategy),
    sourceStrategy: c.readOpt(obj["sourceStrategy"], toBuild_spec_strategy_sourceStrategy),
    type: c.checkStr(obj["type"]),
  }}
export function toBuild_spec_triggeredBy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    bitbucketWebHook: c.readOpt(obj["bitbucketWebHook"], toBuild_spec_triggeredBy_bitbucketWebHook),
    genericWebHook: c.readOpt(obj["genericWebHook"], toBuild_spec_triggeredBy_genericWebHook),
    githubWebHook: c.readOpt(obj["githubWebHook"], toBuild_spec_triggeredBy_githubWebHook),
    gitlabWebHook: c.readOpt(obj["gitlabWebHook"], toBuild_spec_triggeredBy_gitlabWebHook),
    imageChangeBuild: c.readOpt(obj["imageChangeBuild"], toBuild_spec_triggeredBy_imageChangeBuild),
    message: c.readOpt(obj["message"], c.checkStr),
  }}
export function toBuild_status_conditions(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    lastTransitionTime: c.readOpt(obj["lastTransitionTime"], c.toTime),
    lastUpdateTime: c.readOpt(obj["lastUpdateTime"], c.toTime),
    message: c.readOpt(obj["message"], c.checkStr),
    reason: c.readOpt(obj["reason"], c.checkStr),
    status: c.checkStr(obj["status"]),
    type: c.checkStr(obj["type"]),
  }}
export function toBuild_status_config(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.readOpt(obj["fieldPath"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    resourceVersion: c.readOpt(obj["resourceVersion"], c.checkStr),
    uid: c.readOpt(obj["uid"], c.checkStr),
  }}
export function toBuild_status_output(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    to: c.readOpt(obj["to"], toBuild_status_output_to),
  }}
export function toBuild_status_stages(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    durationMilliseconds: c.readOpt(obj["durationMilliseconds"], c.checkNum),
    name: c.readOpt(obj["name"], c.checkStr),
    startTime: c.readOpt(obj["startTime"], c.toTime),
    steps: c.readOpt(obj["steps"], x => c.readList(x, toBuild_status_stages_steps)),
  }}
export function toBuild_spec_output_imageLabels(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.readOpt(obj["value"], c.checkStr),
  }}
export function toBuild_spec_output_pushSecret(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_output_to(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.readOpt(obj["fieldPath"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    resourceVersion: c.readOpt(obj["resourceVersion"], c.checkStr),
    uid: c.readOpt(obj["uid"], c.checkStr),
  }}
export function toBuild_spec_revision_git(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    author: c.readOpt(obj["author"], toBuild_spec_revision_git_author),
    commit: c.readOpt(obj["commit"], c.checkStr),
    committer: c.readOpt(obj["committer"], toBuild_spec_revision_git_committer),
    message: c.readOpt(obj["message"], c.checkStr),
  }}
export function toBuild_spec_source_binary(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    asFile: c.readOpt(obj["asFile"], c.checkStr),
  }}
export function toBuild_spec_source_configMaps(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    configMap: toBuild_spec_source_configMaps_configMap(obj["configMap"]),
    destinationDir: c.readOpt(obj["destinationDir"], c.checkStr),
  }}
export function toBuild_spec_source_git(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    httpProxy: c.readOpt(obj["httpProxy"], c.checkStr),
    httpsProxy: c.readOpt(obj["httpsProxy"], c.checkStr),
    noProxy: c.readOpt(obj["noProxy"], c.checkStr),
    ref: c.readOpt(obj["ref"], c.checkStr),
    uri: c.checkStr(obj["uri"]),
  }}
export function toBuild_spec_source_images(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    as: c.readOpt(obj["as"], x => c.readList(x, c.checkStr)),
    from: toBuild_spec_source_images_from(obj["from"]),
    paths: c.readOpt(obj["paths"], x => c.readList(x, toBuild_spec_source_images_paths)),
    pullSecret: c.readOpt(obj["pullSecret"], toBuild_spec_source_images_pullSecret),
  }}
export function toBuild_spec_source_secrets(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    destinationDir: c.readOpt(obj["destinationDir"], c.checkStr),
    secret: toBuild_spec_source_secrets_secret(obj["secret"]),
  }}
export function toBuild_spec_source_sourceSecret(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_strategy_customStrategy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    buildAPIVersion: c.readOpt(obj["buildAPIVersion"], c.checkStr),
    env: c.readOpt(obj["env"], x => c.readList(x, toBuild_spec_strategy_customStrategy_env)),
    exposeDockerSocket: c.readOpt(obj["exposeDockerSocket"], c.checkBool),
    forcePull: c.readOpt(obj["forcePull"], c.checkBool),
    from: toBuild_spec_strategy_customStrategy_from(obj["from"]),
    pullSecret: c.readOpt(obj["pullSecret"], toBuild_spec_strategy_customStrategy_pullSecret),
    secrets: c.readOpt(obj["secrets"], x => c.readList(x, toBuild_spec_strategy_customStrategy_secrets)),
  }}
export function toBuild_spec_strategy_dockerStrategy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    buildArgs: c.readOpt(obj["buildArgs"], x => c.readList(x, toBuild_spec_strategy_dockerStrategy_buildArgs)),
    dockerfilePath: c.readOpt(obj["dockerfilePath"], c.checkStr),
    env: c.readOpt(obj["env"], x => c.readList(x, toBuild_spec_strategy_dockerStrategy_env)),
    forcePull: c.readOpt(obj["forcePull"], c.checkBool),
    from: c.readOpt(obj["from"], toBuild_spec_strategy_dockerStrategy_from),
    imageOptimizationPolicy: c.readOpt(obj["imageOptimizationPolicy"], c.checkStr),
    noCache: c.readOpt(obj["noCache"], c.checkBool),
    pullSecret: c.readOpt(obj["pullSecret"], toBuild_spec_strategy_dockerStrategy_pullSecret),
  }}
export function toBuild_spec_strategy_jenkinsPipelineStrategy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    env: c.readOpt(obj["env"], x => c.readList(x, toBuild_spec_strategy_jenkinsPipelineStrategy_env)),
    jenkinsfile: c.readOpt(obj["jenkinsfile"], c.checkStr),
    jenkinsfilePath: c.readOpt(obj["jenkinsfilePath"], c.checkStr),
  }}
export function toBuild_spec_strategy_sourceStrategy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    env: c.readOpt(obj["env"], x => c.readList(x, toBuild_spec_strategy_sourceStrategy_env)),
    forcePull: c.readOpt(obj["forcePull"], c.checkBool),
    from: toBuild_spec_strategy_sourceStrategy_from(obj["from"]),
    incremental: c.readOpt(obj["incremental"], c.checkBool),
    pullSecret: c.readOpt(obj["pullSecret"], toBuild_spec_strategy_sourceStrategy_pullSecret),
    scripts: c.readOpt(obj["scripts"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_bitbucketWebHook(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    revision: c.readOpt(obj["revision"], toBuild_spec_triggeredBy_bitbucketWebHook_revision),
    secret: c.readOpt(obj["secret"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_genericWebHook(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    revision: c.readOpt(obj["revision"], toBuild_spec_triggeredBy_genericWebHook_revision),
    secret: c.readOpt(obj["secret"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_githubWebHook(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    revision: c.readOpt(obj["revision"], toBuild_spec_triggeredBy_githubWebHook_revision),
    secret: c.readOpt(obj["secret"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_gitlabWebHook(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    revision: c.readOpt(obj["revision"], toBuild_spec_triggeredBy_gitlabWebHook_revision),
    secret: c.readOpt(obj["secret"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_imageChangeBuild(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    fromRef: c.readOpt(obj["fromRef"], toBuild_spec_triggeredBy_imageChangeBuild_fromRef),
    imageID: c.readOpt(obj["imageID"], c.checkStr),
  }}
export function toBuild_status_output_to(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    imageDigest: c.readOpt(obj["imageDigest"], c.checkStr),
  }}
export function toBuild_status_stages_steps(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    durationMilliseconds: c.readOpt(obj["durationMilliseconds"], c.checkNum),
    name: c.readOpt(obj["name"], c.checkStr),
    startTime: c.readOpt(obj["startTime"], c.toTime),
  }}
export function toBuild_spec_revision_git_author(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    email: c.readOpt(obj["email"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_revision_git_committer(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    email: c.readOpt(obj["email"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_source_configMaps_configMap(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_source_images_from(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.readOpt(obj["fieldPath"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    resourceVersion: c.readOpt(obj["resourceVersion"], c.checkStr),
    uid: c.readOpt(obj["uid"], c.checkStr),
  }}
export function toBuild_spec_source_images_paths(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    destinationDir: c.checkStr(obj["destinationDir"]),
    sourcePath: c.checkStr(obj["sourcePath"]),
  }}
export function toBuild_spec_source_images_pullSecret(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_source_secrets_secret(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_strategy_customStrategy_env(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.readOpt(obj["value"], c.checkStr),
    valueFrom: c.readOpt(obj["valueFrom"], toBuild_spec_strategy_customStrategy_env_valueFrom),
  }}
export function toBuild_spec_strategy_customStrategy_from(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.readOpt(obj["fieldPath"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    resourceVersion: c.readOpt(obj["resourceVersion"], c.checkStr),
    uid: c.readOpt(obj["uid"], c.checkStr),
  }}
export function toBuild_spec_strategy_customStrategy_pullSecret(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_strategy_customStrategy_secrets(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    mountPath: c.checkStr(obj["mountPath"]),
    secretSource: toBuild_spec_strategy_customStrategy_secrets_secretSource(obj["secretSource"]),
  }}
export function toBuild_spec_strategy_dockerStrategy_buildArgs(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.readOpt(obj["value"], c.checkStr),
    valueFrom: c.readOpt(obj["valueFrom"], toBuild_spec_strategy_dockerStrategy_buildArgs_valueFrom),
  }}
export function toBuild_spec_strategy_dockerStrategy_env(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.readOpt(obj["value"], c.checkStr),
    valueFrom: c.readOpt(obj["valueFrom"], toBuild_spec_strategy_dockerStrategy_env_valueFrom),
  }}
export function toBuild_spec_strategy_dockerStrategy_from(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.readOpt(obj["fieldPath"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    resourceVersion: c.readOpt(obj["resourceVersion"], c.checkStr),
    uid: c.readOpt(obj["uid"], c.checkStr),
  }}
export function toBuild_spec_strategy_dockerStrategy_pullSecret(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_strategy_jenkinsPipelineStrategy_env(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.readOpt(obj["value"], c.checkStr),
    valueFrom: c.readOpt(obj["valueFrom"], toBuild_spec_strategy_jenkinsPipelineStrategy_env_valueFrom),
  }}
export function toBuild_spec_strategy_sourceStrategy_env(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.readOpt(obj["value"], c.checkStr),
    valueFrom: c.readOpt(obj["valueFrom"], toBuild_spec_strategy_sourceStrategy_env_valueFrom),
  }}
export function toBuild_spec_strategy_sourceStrategy_from(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.readOpt(obj["fieldPath"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    resourceVersion: c.readOpt(obj["resourceVersion"], c.checkStr),
    uid: c.readOpt(obj["uid"], c.checkStr),
  }}
export function toBuild_spec_strategy_sourceStrategy_pullSecret(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_bitbucketWebHook_revision(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    git: c.readOpt(obj["git"], toBuild_spec_triggeredBy_bitbucketWebHook_revision_git),
    type: c.checkStr(obj["type"]),
  }}
export function toBuild_spec_triggeredBy_genericWebHook_revision(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    git: c.readOpt(obj["git"], toBuild_spec_triggeredBy_genericWebHook_revision_git),
    type: c.checkStr(obj["type"]),
  }}
export function toBuild_spec_triggeredBy_githubWebHook_revision(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    git: c.readOpt(obj["git"], toBuild_spec_triggeredBy_githubWebHook_revision_git),
    type: c.checkStr(obj["type"]),
  }}
export function toBuild_spec_triggeredBy_gitlabWebHook_revision(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    git: c.readOpt(obj["git"], toBuild_spec_triggeredBy_gitlabWebHook_revision_git),
    type: c.checkStr(obj["type"]),
  }}
export function toBuild_spec_triggeredBy_imageChangeBuild_fromRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.readOpt(obj["fieldPath"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    resourceVersion: c.readOpt(obj["resourceVersion"], c.checkStr),
    uid: c.readOpt(obj["uid"], c.checkStr),
  }}
export function toBuild_spec_strategy_customStrategy_env_valueFrom(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    configMapKeyRef: c.readOpt(obj["configMapKeyRef"], toBuild_spec_strategy_customStrategy_env_valueFrom_configMapKeyRef),
    fieldRef: c.readOpt(obj["fieldRef"], toBuild_spec_strategy_customStrategy_env_valueFrom_fieldRef),
    resourceFieldRef: c.readOpt(obj["resourceFieldRef"], toBuild_spec_strategy_customStrategy_env_valueFrom_resourceFieldRef),
    secretKeyRef: c.readOpt(obj["secretKeyRef"], toBuild_spec_strategy_customStrategy_env_valueFrom_secretKeyRef),
  }}
export function toBuild_spec_strategy_customStrategy_secrets_secretSource(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_strategy_dockerStrategy_buildArgs_valueFrom(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    configMapKeyRef: c.readOpt(obj["configMapKeyRef"], toBuild_spec_strategy_dockerStrategy_buildArgs_valueFrom_configMapKeyRef),
    fieldRef: c.readOpt(obj["fieldRef"], toBuild_spec_strategy_dockerStrategy_buildArgs_valueFrom_fieldRef),
    resourceFieldRef: c.readOpt(obj["resourceFieldRef"], toBuild_spec_strategy_dockerStrategy_buildArgs_valueFrom_resourceFieldRef),
    secretKeyRef: c.readOpt(obj["secretKeyRef"], toBuild_spec_strategy_dockerStrategy_buildArgs_valueFrom_secretKeyRef),
  }}
export function toBuild_spec_strategy_dockerStrategy_env_valueFrom(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    configMapKeyRef: c.readOpt(obj["configMapKeyRef"], toBuild_spec_strategy_dockerStrategy_env_valueFrom_configMapKeyRef),
    fieldRef: c.readOpt(obj["fieldRef"], toBuild_spec_strategy_dockerStrategy_env_valueFrom_fieldRef),
    resourceFieldRef: c.readOpt(obj["resourceFieldRef"], toBuild_spec_strategy_dockerStrategy_env_valueFrom_resourceFieldRef),
    secretKeyRef: c.readOpt(obj["secretKeyRef"], toBuild_spec_strategy_dockerStrategy_env_valueFrom_secretKeyRef),
  }}
export function toBuild_spec_strategy_jenkinsPipelineStrategy_env_valueFrom(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    configMapKeyRef: c.readOpt(obj["configMapKeyRef"], toBuild_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_configMapKeyRef),
    fieldRef: c.readOpt(obj["fieldRef"], toBuild_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_fieldRef),
    resourceFieldRef: c.readOpt(obj["resourceFieldRef"], toBuild_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_resourceFieldRef),
    secretKeyRef: c.readOpt(obj["secretKeyRef"], toBuild_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_secretKeyRef),
  }}
export function toBuild_spec_strategy_sourceStrategy_env_valueFrom(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    configMapKeyRef: c.readOpt(obj["configMapKeyRef"], toBuild_spec_strategy_sourceStrategy_env_valueFrom_configMapKeyRef),
    fieldRef: c.readOpt(obj["fieldRef"], toBuild_spec_strategy_sourceStrategy_env_valueFrom_fieldRef),
    resourceFieldRef: c.readOpt(obj["resourceFieldRef"], toBuild_spec_strategy_sourceStrategy_env_valueFrom_resourceFieldRef),
    secretKeyRef: c.readOpt(obj["secretKeyRef"], toBuild_spec_strategy_sourceStrategy_env_valueFrom_secretKeyRef),
  }}
export function toBuild_spec_triggeredBy_bitbucketWebHook_revision_git(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    author: c.readOpt(obj["author"], toBuild_spec_triggeredBy_bitbucketWebHook_revision_git_author),
    commit: c.readOpt(obj["commit"], c.checkStr),
    committer: c.readOpt(obj["committer"], toBuild_spec_triggeredBy_bitbucketWebHook_revision_git_committer),
    message: c.readOpt(obj["message"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_genericWebHook_revision_git(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    author: c.readOpt(obj["author"], toBuild_spec_triggeredBy_genericWebHook_revision_git_author),
    commit: c.readOpt(obj["commit"], c.checkStr),
    committer: c.readOpt(obj["committer"], toBuild_spec_triggeredBy_genericWebHook_revision_git_committer),
    message: c.readOpt(obj["message"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_githubWebHook_revision_git(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    author: c.readOpt(obj["author"], toBuild_spec_triggeredBy_githubWebHook_revision_git_author),
    commit: c.readOpt(obj["commit"], c.checkStr),
    committer: c.readOpt(obj["committer"], toBuild_spec_triggeredBy_githubWebHook_revision_git_committer),
    message: c.readOpt(obj["message"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_gitlabWebHook_revision_git(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    author: c.readOpt(obj["author"], toBuild_spec_triggeredBy_gitlabWebHook_revision_git_author),
    commit: c.readOpt(obj["commit"], c.checkStr),
    committer: c.readOpt(obj["committer"], toBuild_spec_triggeredBy_gitlabWebHook_revision_git_committer),
    message: c.readOpt(obj["message"], c.checkStr),
  }}
export function toBuild_spec_strategy_customStrategy_env_valueFrom_configMapKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuild_spec_strategy_customStrategy_env_valueFrom_fieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.checkStr(obj["fieldPath"]),
  }}
export function toBuild_spec_strategy_customStrategy_env_valueFrom_resourceFieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    containerName: c.readOpt(obj["containerName"], c.checkStr),
    divisor: c.readOpt(obj["divisor"], c.checkStr),
    resource: c.checkStr(obj["resource"]),
  }}
export function toBuild_spec_strategy_customStrategy_env_valueFrom_secretKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuild_spec_strategy_dockerStrategy_buildArgs_valueFrom_configMapKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuild_spec_strategy_dockerStrategy_buildArgs_valueFrom_fieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.checkStr(obj["fieldPath"]),
  }}
export function toBuild_spec_strategy_dockerStrategy_buildArgs_valueFrom_resourceFieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    containerName: c.readOpt(obj["containerName"], c.checkStr),
    divisor: c.readOpt(obj["divisor"], c.checkStr),
    resource: c.checkStr(obj["resource"]),
  }}
export function toBuild_spec_strategy_dockerStrategy_buildArgs_valueFrom_secretKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuild_spec_strategy_dockerStrategy_env_valueFrom_configMapKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuild_spec_strategy_dockerStrategy_env_valueFrom_fieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.checkStr(obj["fieldPath"]),
  }}
export function toBuild_spec_strategy_dockerStrategy_env_valueFrom_resourceFieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    containerName: c.readOpt(obj["containerName"], c.checkStr),
    divisor: c.readOpt(obj["divisor"], c.checkStr),
    resource: c.checkStr(obj["resource"]),
  }}
export function toBuild_spec_strategy_dockerStrategy_env_valueFrom_secretKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuild_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_configMapKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuild_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_fieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.checkStr(obj["fieldPath"]),
  }}
export function toBuild_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_resourceFieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    containerName: c.readOpt(obj["containerName"], c.checkStr),
    divisor: c.readOpt(obj["divisor"], c.checkStr),
    resource: c.checkStr(obj["resource"]),
  }}
export function toBuild_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_secretKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuild_spec_strategy_sourceStrategy_env_valueFrom_configMapKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuild_spec_strategy_sourceStrategy_env_valueFrom_fieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.checkStr(obj["fieldPath"]),
  }}
export function toBuild_spec_strategy_sourceStrategy_env_valueFrom_resourceFieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    containerName: c.readOpt(obj["containerName"], c.checkStr),
    divisor: c.readOpt(obj["divisor"], c.checkStr),
    resource: c.checkStr(obj["resource"]),
  }}
export function toBuild_spec_strategy_sourceStrategy_env_valueFrom_secretKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuild_spec_triggeredBy_bitbucketWebHook_revision_git_author(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    email: c.readOpt(obj["email"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_bitbucketWebHook_revision_git_committer(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    email: c.readOpt(obj["email"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_genericWebHook_revision_git_author(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    email: c.readOpt(obj["email"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_genericWebHook_revision_git_committer(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    email: c.readOpt(obj["email"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_githubWebHook_revision_git_author(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    email: c.readOpt(obj["email"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_githubWebHook_revision_git_committer(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    email: c.readOpt(obj["email"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_gitlabWebHook_revision_git_author(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    email: c.readOpt(obj["email"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuild_spec_triggeredBy_gitlabWebHook_revision_git_committer(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    email: c.readOpt(obj["email"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
  }}

export interface BuildList extends ListOf<Build> {
  apiVersion?: "build.danopia.net/v1";
  kind?: "BuildList";
};
export function toBuildList(input: c.JSONValue): BuildList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "build.danopia.net/v1", "BuildList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toBuild),
  }}

export interface BuildConfig {
  apiVersion?: "build.danopia.net/v1";
  kind?: "BuildConfig";
  spec: {
    completionDeadlineSeconds?: number | null;
    failedBuildsHistoryLimit?: number | null;
    nodeSelector?: Record<string,string> | null;
    output?: {
      imageLabels?: Array<{
        name: string;
        value?: string | null;
      }> | null;
      pushSecret?: {
        name?: string | null;
      } | null;
      to?: {
        apiVersion?: string | null;
        fieldPath?: string | null;
        kind?: string | null;
        name?: string | null;
        namespace?: string | null;
        resourceVersion?: string | null;
        uid?: string | null;
      } | null;
    } | null;
    postCommit?: {
      args?: Array<string> | null;
      command?: Array<string> | null;
      script?: string | null;
    } | null;
    resources?: {
      limits?: Record<string,string> | null;
      requests?: Record<string,string> | null;
    } | null;
    revision?: {
      git?: {
        author?: {
          email?: string | null;
          name?: string | null;
        } | null;
        commit?: string | null;
        committer?: {
          email?: string | null;
          name?: string | null;
        } | null;
        message?: string | null;
      } | null;
      type: string;
    } | null;
    runPolicy?: string | null;
    serviceAccount?: string | null;
    source?: {
      binary?: {
        asFile?: string | null;
      } | null;
      configMaps?: Array<{
        configMap: {
          name?: string | null;
        };
        destinationDir?: string | null;
      }> | null;
      contextDir?: string | null;
      dockerfile?: string | null;
      git?: {
        httpProxy?: string | null;
        httpsProxy?: string | null;
        noProxy?: string | null;
        ref?: string | null;
        uri: string;
      } | null;
      images?: Array<{
        as?: Array<string> | null;
        from: {
          apiVersion?: string | null;
          fieldPath?: string | null;
          kind?: string | null;
          name?: string | null;
          namespace?: string | null;
          resourceVersion?: string | null;
          uid?: string | null;
        };
        paths?: Array<{
          destinationDir: string;
          sourcePath: string;
        }> | null;
        pullSecret?: {
          name?: string | null;
        } | null;
      }> | null;
      secrets?: Array<{
        destinationDir?: string | null;
        secret: {
          name?: string | null;
        };
      }> | null;
      sourceSecret?: {
        name?: string | null;
      } | null;
      type: string;
    } | null;
    strategy: {
      customStrategy?: {
        buildAPIVersion?: string | null;
        env?: Array<{
          name: string;
          value?: string | null;
          valueFrom?: {
            configMapKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
            fieldRef?: {
              apiVersion?: string | null;
              fieldPath: string;
            } | null;
            resourceFieldRef?: {
              containerName?: string | null;
              divisor?: string | null;
              resource: string;
            } | null;
            secretKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
          } | null;
        }> | null;
        exposeDockerSocket?: boolean | null;
        forcePull?: boolean | null;
        from: {
          apiVersion?: string | null;
          fieldPath?: string | null;
          kind?: string | null;
          name?: string | null;
          namespace?: string | null;
          resourceVersion?: string | null;
          uid?: string | null;
        };
        pullSecret?: {
          name?: string | null;
        } | null;
        secrets?: Array<{
          mountPath: string;
          secretSource: {
            name?: string | null;
          };
        }> | null;
      } | null;
      dockerStrategy?: {
        buildArgs?: Array<{
          name: string;
          value?: string | null;
          valueFrom?: {
            configMapKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
            fieldRef?: {
              apiVersion?: string | null;
              fieldPath: string;
            } | null;
            resourceFieldRef?: {
              containerName?: string | null;
              divisor?: string | null;
              resource: string;
            } | null;
            secretKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
          } | null;
        }> | null;
        dockerfilePath?: string | null;
        env?: Array<{
          name: string;
          value?: string | null;
          valueFrom?: {
            configMapKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
            fieldRef?: {
              apiVersion?: string | null;
              fieldPath: string;
            } | null;
            resourceFieldRef?: {
              containerName?: string | null;
              divisor?: string | null;
              resource: string;
            } | null;
            secretKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
          } | null;
        }> | null;
        forcePull?: boolean | null;
        from?: {
          apiVersion?: string | null;
          fieldPath?: string | null;
          kind?: string | null;
          name?: string | null;
          namespace?: string | null;
          resourceVersion?: string | null;
          uid?: string | null;
        } | null;
        imageOptimizationPolicy?: string | null;
        noCache?: boolean | null;
        pullSecret?: {
          name?: string | null;
        } | null;
      } | null;
      jenkinsPipelineStrategy?: {
        env?: Array<{
          name: string;
          value?: string | null;
          valueFrom?: {
            configMapKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
            fieldRef?: {
              apiVersion?: string | null;
              fieldPath: string;
            } | null;
            resourceFieldRef?: {
              containerName?: string | null;
              divisor?: string | null;
              resource: string;
            } | null;
            secretKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
          } | null;
        }> | null;
        jenkinsfile?: string | null;
        jenkinsfilePath?: string | null;
      } | null;
      sourceStrategy?: {
        env?: Array<{
          name: string;
          value?: string | null;
          valueFrom?: {
            configMapKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
            fieldRef?: {
              apiVersion?: string | null;
              fieldPath: string;
            } | null;
            resourceFieldRef?: {
              containerName?: string | null;
              divisor?: string | null;
              resource: string;
            } | null;
            secretKeyRef?: {
              key: string;
              name?: string | null;
              optional?: boolean | null;
            } | null;
          } | null;
        }> | null;
        forcePull?: boolean | null;
        from: {
          apiVersion?: string | null;
          fieldPath?: string | null;
          kind?: string | null;
          name?: string | null;
          namespace?: string | null;
          resourceVersion?: string | null;
          uid?: string | null;
        };
        incremental?: boolean | null;
        pullSecret?: {
          name?: string | null;
        } | null;
        scripts?: string | null;
      } | null;
      type: string;
    };
    successfulBuildsHistoryLimit?: number | null;
    triggers?: Array<{
      bitbucket?: {
        allowEnv?: boolean | null;
        secret?: string | null;
        secretReference?: {
          name: string;
        } | null;
      } | null;
      generic?: {
        allowEnv?: boolean | null;
        secret?: string | null;
        secretReference?: {
          name: string;
        } | null;
      } | null;
      github?: {
        allowEnv?: boolean | null;
        secret?: string | null;
        secretReference?: {
          name: string;
        } | null;
      } | null;
      gitlab?: {
        allowEnv?: boolean | null;
        secret?: string | null;
        secretReference?: {
          name: string;
        } | null;
      } | null;
      imageChange?: {
        from?: {
          apiVersion?: string | null;
          fieldPath?: string | null;
          kind?: string | null;
          name?: string | null;
          namespace?: string | null;
          resourceVersion?: string | null;
          uid?: string | null;
        } | null;
        lastTriggeredImageID?: string | null;
        paused?: boolean | null;
      } | null;
      type: string;
    }> | null;
  };
  status?: {
    lastVersion: number;
  } | null;
  metadata?: MetaV1.ObjectMeta | null;
}
export function toBuildConfig(input: c.JSONValue): BuildConfig & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "build.danopia.net/v1", "BuildConfig"),
    spec: toBuildConfig_spec(obj["spec"]),
    status: c.readOpt(obj["status"], toBuildConfig_status),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
  }}
export function fromBuildConfig(input: BuildConfig): c.JSONValue {
  return {
    ...c.assertOrAddApiVersionAndKind(input, "build.danopia.net/v1", "BuildConfig"),
    ...input,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
  }}
export function toBuildConfig_spec(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    completionDeadlineSeconds: c.readOpt(obj["completionDeadlineSeconds"], c.checkNum),
    failedBuildsHistoryLimit: c.readOpt(obj["failedBuildsHistoryLimit"], c.checkNum),
    nodeSelector: c.readOpt(obj["nodeSelector"], x => c.readMap(x, c.checkStr)),
    output: c.readOpt(obj["output"], toBuildConfig_spec_output),
    postCommit: c.readOpt(obj["postCommit"], toBuildConfig_spec_postCommit),
    resources: c.readOpt(obj["resources"], toBuildConfig_spec_resources),
    revision: c.readOpt(obj["revision"], toBuildConfig_spec_revision),
    runPolicy: c.readOpt(obj["runPolicy"], c.checkStr),
    serviceAccount: c.readOpt(obj["serviceAccount"], c.checkStr),
    source: c.readOpt(obj["source"], toBuildConfig_spec_source),
    strategy: toBuildConfig_spec_strategy(obj["strategy"]),
    successfulBuildsHistoryLimit: c.readOpt(obj["successfulBuildsHistoryLimit"], c.checkNum),
    triggers: c.readOpt(obj["triggers"], x => c.readList(x, toBuildConfig_spec_triggers)),
  }}
export function toBuildConfig_status(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    lastVersion: c.checkNum(obj["lastVersion"]),
  }}
export function toBuildConfig_spec_output(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    imageLabels: c.readOpt(obj["imageLabels"], x => c.readList(x, toBuildConfig_spec_output_imageLabels)),
    pushSecret: c.readOpt(obj["pushSecret"], toBuildConfig_spec_output_pushSecret),
    to: c.readOpt(obj["to"], toBuildConfig_spec_output_to),
  }}
export function toBuildConfig_spec_postCommit(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    args: c.readOpt(obj["args"], x => c.readList(x, c.checkStr)),
    command: c.readOpt(obj["command"], x => c.readList(x, c.checkStr)),
    script: c.readOpt(obj["script"], c.checkStr),
  }}
export function toBuildConfig_spec_resources(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    limits: c.readOpt(obj["limits"], x => c.readMap(x, c.checkStr)),
    requests: c.readOpt(obj["requests"], x => c.readMap(x, c.checkStr)),
  }}
export function toBuildConfig_spec_revision(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    git: c.readOpt(obj["git"], toBuildConfig_spec_revision_git),
    type: c.checkStr(obj["type"]),
  }}
export function toBuildConfig_spec_source(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    binary: c.readOpt(obj["binary"], toBuildConfig_spec_source_binary),
    configMaps: c.readOpt(obj["configMaps"], x => c.readList(x, toBuildConfig_spec_source_configMaps)),
    contextDir: c.readOpt(obj["contextDir"], c.checkStr),
    dockerfile: c.readOpt(obj["dockerfile"], c.checkStr),
    git: c.readOpt(obj["git"], toBuildConfig_spec_source_git),
    images: c.readOpt(obj["images"], x => c.readList(x, toBuildConfig_spec_source_images)),
    secrets: c.readOpt(obj["secrets"], x => c.readList(x, toBuildConfig_spec_source_secrets)),
    sourceSecret: c.readOpt(obj["sourceSecret"], toBuildConfig_spec_source_sourceSecret),
    type: c.checkStr(obj["type"]),
  }}
export function toBuildConfig_spec_strategy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    customStrategy: c.readOpt(obj["customStrategy"], toBuildConfig_spec_strategy_customStrategy),
    dockerStrategy: c.readOpt(obj["dockerStrategy"], toBuildConfig_spec_strategy_dockerStrategy),
    jenkinsPipelineStrategy: c.readOpt(obj["jenkinsPipelineStrategy"], toBuildConfig_spec_strategy_jenkinsPipelineStrategy),
    sourceStrategy: c.readOpt(obj["sourceStrategy"], toBuildConfig_spec_strategy_sourceStrategy),
    type: c.checkStr(obj["type"]),
  }}
export function toBuildConfig_spec_triggers(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    bitbucket: c.readOpt(obj["bitbucket"], toBuildConfig_spec_triggers_bitbucket),
    generic: c.readOpt(obj["generic"], toBuildConfig_spec_triggers_generic),
    github: c.readOpt(obj["github"], toBuildConfig_spec_triggers_github),
    gitlab: c.readOpt(obj["gitlab"], toBuildConfig_spec_triggers_gitlab),
    imageChange: c.readOpt(obj["imageChange"], toBuildConfig_spec_triggers_imageChange),
    type: c.checkStr(obj["type"]),
  }}
export function toBuildConfig_spec_output_imageLabels(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.readOpt(obj["value"], c.checkStr),
  }}
export function toBuildConfig_spec_output_pushSecret(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuildConfig_spec_output_to(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.readOpt(obj["fieldPath"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    resourceVersion: c.readOpt(obj["resourceVersion"], c.checkStr),
    uid: c.readOpt(obj["uid"], c.checkStr),
  }}
export function toBuildConfig_spec_revision_git(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    author: c.readOpt(obj["author"], toBuildConfig_spec_revision_git_author),
    commit: c.readOpt(obj["commit"], c.checkStr),
    committer: c.readOpt(obj["committer"], toBuildConfig_spec_revision_git_committer),
    message: c.readOpt(obj["message"], c.checkStr),
  }}
export function toBuildConfig_spec_source_binary(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    asFile: c.readOpt(obj["asFile"], c.checkStr),
  }}
export function toBuildConfig_spec_source_configMaps(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    configMap: toBuildConfig_spec_source_configMaps_configMap(obj["configMap"]),
    destinationDir: c.readOpt(obj["destinationDir"], c.checkStr),
  }}
export function toBuildConfig_spec_source_git(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    httpProxy: c.readOpt(obj["httpProxy"], c.checkStr),
    httpsProxy: c.readOpt(obj["httpsProxy"], c.checkStr),
    noProxy: c.readOpt(obj["noProxy"], c.checkStr),
    ref: c.readOpt(obj["ref"], c.checkStr),
    uri: c.checkStr(obj["uri"]),
  }}
export function toBuildConfig_spec_source_images(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    as: c.readOpt(obj["as"], x => c.readList(x, c.checkStr)),
    from: toBuildConfig_spec_source_images_from(obj["from"]),
    paths: c.readOpt(obj["paths"], x => c.readList(x, toBuildConfig_spec_source_images_paths)),
    pullSecret: c.readOpt(obj["pullSecret"], toBuildConfig_spec_source_images_pullSecret),
  }}
export function toBuildConfig_spec_source_secrets(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    destinationDir: c.readOpt(obj["destinationDir"], c.checkStr),
    secret: toBuildConfig_spec_source_secrets_secret(obj["secret"]),
  }}
export function toBuildConfig_spec_source_sourceSecret(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuildConfig_spec_strategy_customStrategy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    buildAPIVersion: c.readOpt(obj["buildAPIVersion"], c.checkStr),
    env: c.readOpt(obj["env"], x => c.readList(x, toBuildConfig_spec_strategy_customStrategy_env)),
    exposeDockerSocket: c.readOpt(obj["exposeDockerSocket"], c.checkBool),
    forcePull: c.readOpt(obj["forcePull"], c.checkBool),
    from: toBuildConfig_spec_strategy_customStrategy_from(obj["from"]),
    pullSecret: c.readOpt(obj["pullSecret"], toBuildConfig_spec_strategy_customStrategy_pullSecret),
    secrets: c.readOpt(obj["secrets"], x => c.readList(x, toBuildConfig_spec_strategy_customStrategy_secrets)),
  }}
export function toBuildConfig_spec_strategy_dockerStrategy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    buildArgs: c.readOpt(obj["buildArgs"], x => c.readList(x, toBuildConfig_spec_strategy_dockerStrategy_buildArgs)),
    dockerfilePath: c.readOpt(obj["dockerfilePath"], c.checkStr),
    env: c.readOpt(obj["env"], x => c.readList(x, toBuildConfig_spec_strategy_dockerStrategy_env)),
    forcePull: c.readOpt(obj["forcePull"], c.checkBool),
    from: c.readOpt(obj["from"], toBuildConfig_spec_strategy_dockerStrategy_from),
    imageOptimizationPolicy: c.readOpt(obj["imageOptimizationPolicy"], c.checkStr),
    noCache: c.readOpt(obj["noCache"], c.checkBool),
    pullSecret: c.readOpt(obj["pullSecret"], toBuildConfig_spec_strategy_dockerStrategy_pullSecret),
  }}
export function toBuildConfig_spec_strategy_jenkinsPipelineStrategy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    env: c.readOpt(obj["env"], x => c.readList(x, toBuildConfig_spec_strategy_jenkinsPipelineStrategy_env)),
    jenkinsfile: c.readOpt(obj["jenkinsfile"], c.checkStr),
    jenkinsfilePath: c.readOpt(obj["jenkinsfilePath"], c.checkStr),
  }}
export function toBuildConfig_spec_strategy_sourceStrategy(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    env: c.readOpt(obj["env"], x => c.readList(x, toBuildConfig_spec_strategy_sourceStrategy_env)),
    forcePull: c.readOpt(obj["forcePull"], c.checkBool),
    from: toBuildConfig_spec_strategy_sourceStrategy_from(obj["from"]),
    incremental: c.readOpt(obj["incremental"], c.checkBool),
    pullSecret: c.readOpt(obj["pullSecret"], toBuildConfig_spec_strategy_sourceStrategy_pullSecret),
    scripts: c.readOpt(obj["scripts"], c.checkStr),
  }}
export function toBuildConfig_spec_triggers_bitbucket(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    allowEnv: c.readOpt(obj["allowEnv"], c.checkBool),
    secret: c.readOpt(obj["secret"], c.checkStr),
    secretReference: c.readOpt(obj["secretReference"], toBuildConfig_spec_triggers_bitbucket_secretReference),
  }}
export function toBuildConfig_spec_triggers_generic(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    allowEnv: c.readOpt(obj["allowEnv"], c.checkBool),
    secret: c.readOpt(obj["secret"], c.checkStr),
    secretReference: c.readOpt(obj["secretReference"], toBuildConfig_spec_triggers_generic_secretReference),
  }}
export function toBuildConfig_spec_triggers_github(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    allowEnv: c.readOpt(obj["allowEnv"], c.checkBool),
    secret: c.readOpt(obj["secret"], c.checkStr),
    secretReference: c.readOpt(obj["secretReference"], toBuildConfig_spec_triggers_github_secretReference),
  }}
export function toBuildConfig_spec_triggers_gitlab(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    allowEnv: c.readOpt(obj["allowEnv"], c.checkBool),
    secret: c.readOpt(obj["secret"], c.checkStr),
    secretReference: c.readOpt(obj["secretReference"], toBuildConfig_spec_triggers_gitlab_secretReference),
  }}
export function toBuildConfig_spec_triggers_imageChange(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    from: c.readOpt(obj["from"], toBuildConfig_spec_triggers_imageChange_from),
    lastTriggeredImageID: c.readOpt(obj["lastTriggeredImageID"], c.checkStr),
    paused: c.readOpt(obj["paused"], c.checkBool),
  }}
export function toBuildConfig_spec_revision_git_author(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    email: c.readOpt(obj["email"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuildConfig_spec_revision_git_committer(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    email: c.readOpt(obj["email"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuildConfig_spec_source_configMaps_configMap(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuildConfig_spec_source_images_from(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.readOpt(obj["fieldPath"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    resourceVersion: c.readOpt(obj["resourceVersion"], c.checkStr),
    uid: c.readOpt(obj["uid"], c.checkStr),
  }}
export function toBuildConfig_spec_source_images_paths(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    destinationDir: c.checkStr(obj["destinationDir"]),
    sourcePath: c.checkStr(obj["sourcePath"]),
  }}
export function toBuildConfig_spec_source_images_pullSecret(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuildConfig_spec_source_secrets_secret(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuildConfig_spec_strategy_customStrategy_env(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.readOpt(obj["value"], c.checkStr),
    valueFrom: c.readOpt(obj["valueFrom"], toBuildConfig_spec_strategy_customStrategy_env_valueFrom),
  }}
export function toBuildConfig_spec_strategy_customStrategy_from(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.readOpt(obj["fieldPath"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    resourceVersion: c.readOpt(obj["resourceVersion"], c.checkStr),
    uid: c.readOpt(obj["uid"], c.checkStr),
  }}
export function toBuildConfig_spec_strategy_customStrategy_pullSecret(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuildConfig_spec_strategy_customStrategy_secrets(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    mountPath: c.checkStr(obj["mountPath"]),
    secretSource: toBuildConfig_spec_strategy_customStrategy_secrets_secretSource(obj["secretSource"]),
  }}
export function toBuildConfig_spec_strategy_dockerStrategy_buildArgs(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.readOpt(obj["value"], c.checkStr),
    valueFrom: c.readOpt(obj["valueFrom"], toBuildConfig_spec_strategy_dockerStrategy_buildArgs_valueFrom),
  }}
export function toBuildConfig_spec_strategy_dockerStrategy_env(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.readOpt(obj["value"], c.checkStr),
    valueFrom: c.readOpt(obj["valueFrom"], toBuildConfig_spec_strategy_dockerStrategy_env_valueFrom),
  }}
export function toBuildConfig_spec_strategy_dockerStrategy_from(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.readOpt(obj["fieldPath"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    resourceVersion: c.readOpt(obj["resourceVersion"], c.checkStr),
    uid: c.readOpt(obj["uid"], c.checkStr),
  }}
export function toBuildConfig_spec_strategy_dockerStrategy_pullSecret(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuildConfig_spec_strategy_jenkinsPipelineStrategy_env(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.readOpt(obj["value"], c.checkStr),
    valueFrom: c.readOpt(obj["valueFrom"], toBuildConfig_spec_strategy_jenkinsPipelineStrategy_env_valueFrom),
  }}
export function toBuildConfig_spec_strategy_sourceStrategy_env(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
    value: c.readOpt(obj["value"], c.checkStr),
    valueFrom: c.readOpt(obj["valueFrom"], toBuildConfig_spec_strategy_sourceStrategy_env_valueFrom),
  }}
export function toBuildConfig_spec_strategy_sourceStrategy_from(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.readOpt(obj["fieldPath"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    resourceVersion: c.readOpt(obj["resourceVersion"], c.checkStr),
    uid: c.readOpt(obj["uid"], c.checkStr),
  }}
export function toBuildConfig_spec_strategy_sourceStrategy_pullSecret(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuildConfig_spec_triggers_bitbucket_secretReference(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
  }}
export function toBuildConfig_spec_triggers_generic_secretReference(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
  }}
export function toBuildConfig_spec_triggers_github_secretReference(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
  }}
export function toBuildConfig_spec_triggers_gitlab_secretReference(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.checkStr(obj["name"]),
  }}
export function toBuildConfig_spec_triggers_imageChange_from(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.readOpt(obj["fieldPath"], c.checkStr),
    kind: c.readOpt(obj["kind"], c.checkStr),
    name: c.readOpt(obj["name"], c.checkStr),
    namespace: c.readOpt(obj["namespace"], c.checkStr),
    resourceVersion: c.readOpt(obj["resourceVersion"], c.checkStr),
    uid: c.readOpt(obj["uid"], c.checkStr),
  }}
export function toBuildConfig_spec_strategy_customStrategy_env_valueFrom(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    configMapKeyRef: c.readOpt(obj["configMapKeyRef"], toBuildConfig_spec_strategy_customStrategy_env_valueFrom_configMapKeyRef),
    fieldRef: c.readOpt(obj["fieldRef"], toBuildConfig_spec_strategy_customStrategy_env_valueFrom_fieldRef),
    resourceFieldRef: c.readOpt(obj["resourceFieldRef"], toBuildConfig_spec_strategy_customStrategy_env_valueFrom_resourceFieldRef),
    secretKeyRef: c.readOpt(obj["secretKeyRef"], toBuildConfig_spec_strategy_customStrategy_env_valueFrom_secretKeyRef),
  }}
export function toBuildConfig_spec_strategy_customStrategy_secrets_secretSource(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    name: c.readOpt(obj["name"], c.checkStr),
  }}
export function toBuildConfig_spec_strategy_dockerStrategy_buildArgs_valueFrom(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    configMapKeyRef: c.readOpt(obj["configMapKeyRef"], toBuildConfig_spec_strategy_dockerStrategy_buildArgs_valueFrom_configMapKeyRef),
    fieldRef: c.readOpt(obj["fieldRef"], toBuildConfig_spec_strategy_dockerStrategy_buildArgs_valueFrom_fieldRef),
    resourceFieldRef: c.readOpt(obj["resourceFieldRef"], toBuildConfig_spec_strategy_dockerStrategy_buildArgs_valueFrom_resourceFieldRef),
    secretKeyRef: c.readOpt(obj["secretKeyRef"], toBuildConfig_spec_strategy_dockerStrategy_buildArgs_valueFrom_secretKeyRef),
  }}
export function toBuildConfig_spec_strategy_dockerStrategy_env_valueFrom(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    configMapKeyRef: c.readOpt(obj["configMapKeyRef"], toBuildConfig_spec_strategy_dockerStrategy_env_valueFrom_configMapKeyRef),
    fieldRef: c.readOpt(obj["fieldRef"], toBuildConfig_spec_strategy_dockerStrategy_env_valueFrom_fieldRef),
    resourceFieldRef: c.readOpt(obj["resourceFieldRef"], toBuildConfig_spec_strategy_dockerStrategy_env_valueFrom_resourceFieldRef),
    secretKeyRef: c.readOpt(obj["secretKeyRef"], toBuildConfig_spec_strategy_dockerStrategy_env_valueFrom_secretKeyRef),
  }}
export function toBuildConfig_spec_strategy_jenkinsPipelineStrategy_env_valueFrom(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    configMapKeyRef: c.readOpt(obj["configMapKeyRef"], toBuildConfig_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_configMapKeyRef),
    fieldRef: c.readOpt(obj["fieldRef"], toBuildConfig_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_fieldRef),
    resourceFieldRef: c.readOpt(obj["resourceFieldRef"], toBuildConfig_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_resourceFieldRef),
    secretKeyRef: c.readOpt(obj["secretKeyRef"], toBuildConfig_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_secretKeyRef),
  }}
export function toBuildConfig_spec_strategy_sourceStrategy_env_valueFrom(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    configMapKeyRef: c.readOpt(obj["configMapKeyRef"], toBuildConfig_spec_strategy_sourceStrategy_env_valueFrom_configMapKeyRef),
    fieldRef: c.readOpt(obj["fieldRef"], toBuildConfig_spec_strategy_sourceStrategy_env_valueFrom_fieldRef),
    resourceFieldRef: c.readOpt(obj["resourceFieldRef"], toBuildConfig_spec_strategy_sourceStrategy_env_valueFrom_resourceFieldRef),
    secretKeyRef: c.readOpt(obj["secretKeyRef"], toBuildConfig_spec_strategy_sourceStrategy_env_valueFrom_secretKeyRef),
  }}
export function toBuildConfig_spec_strategy_customStrategy_env_valueFrom_configMapKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuildConfig_spec_strategy_customStrategy_env_valueFrom_fieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.checkStr(obj["fieldPath"]),
  }}
export function toBuildConfig_spec_strategy_customStrategy_env_valueFrom_resourceFieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    containerName: c.readOpt(obj["containerName"], c.checkStr),
    divisor: c.readOpt(obj["divisor"], c.checkStr),
    resource: c.checkStr(obj["resource"]),
  }}
export function toBuildConfig_spec_strategy_customStrategy_env_valueFrom_secretKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuildConfig_spec_strategy_dockerStrategy_buildArgs_valueFrom_configMapKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuildConfig_spec_strategy_dockerStrategy_buildArgs_valueFrom_fieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.checkStr(obj["fieldPath"]),
  }}
export function toBuildConfig_spec_strategy_dockerStrategy_buildArgs_valueFrom_resourceFieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    containerName: c.readOpt(obj["containerName"], c.checkStr),
    divisor: c.readOpt(obj["divisor"], c.checkStr),
    resource: c.checkStr(obj["resource"]),
  }}
export function toBuildConfig_spec_strategy_dockerStrategy_buildArgs_valueFrom_secretKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuildConfig_spec_strategy_dockerStrategy_env_valueFrom_configMapKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuildConfig_spec_strategy_dockerStrategy_env_valueFrom_fieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.checkStr(obj["fieldPath"]),
  }}
export function toBuildConfig_spec_strategy_dockerStrategy_env_valueFrom_resourceFieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    containerName: c.readOpt(obj["containerName"], c.checkStr),
    divisor: c.readOpt(obj["divisor"], c.checkStr),
    resource: c.checkStr(obj["resource"]),
  }}
export function toBuildConfig_spec_strategy_dockerStrategy_env_valueFrom_secretKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuildConfig_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_configMapKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuildConfig_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_fieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.checkStr(obj["fieldPath"]),
  }}
export function toBuildConfig_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_resourceFieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    containerName: c.readOpt(obj["containerName"], c.checkStr),
    divisor: c.readOpt(obj["divisor"], c.checkStr),
    resource: c.checkStr(obj["resource"]),
  }}
export function toBuildConfig_spec_strategy_jenkinsPipelineStrategy_env_valueFrom_secretKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuildConfig_spec_strategy_sourceStrategy_env_valueFrom_configMapKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}
export function toBuildConfig_spec_strategy_sourceStrategy_env_valueFrom_fieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
    fieldPath: c.checkStr(obj["fieldPath"]),
  }}
export function toBuildConfig_spec_strategy_sourceStrategy_env_valueFrom_resourceFieldRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    containerName: c.readOpt(obj["containerName"], c.checkStr),
    divisor: c.readOpt(obj["divisor"], c.checkStr),
    resource: c.checkStr(obj["resource"]),
  }}
export function toBuildConfig_spec_strategy_sourceStrategy_env_valueFrom_secretKeyRef(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    key: c.checkStr(obj["key"]),
    name: c.readOpt(obj["name"], c.checkStr),
    optional: c.readOpt(obj["optional"], c.checkBool),
  }}

export interface BuildConfigList extends ListOf<BuildConfig> {
  apiVersion?: "build.danopia.net/v1";
  kind?: "BuildConfigList";
};
export function toBuildConfigList(input: c.JSONValue): BuildConfigList & c.ApiKind {
  const obj = c.checkObj(input);
  return {
    ...c.assertOrAddApiVersionAndKind(obj, "build.danopia.net/v1", "BuildConfigList"),
    metadata: MetaV1.toListMeta(obj.metadata),
    items: c.readList(obj.items, toBuildConfig),
  }}
