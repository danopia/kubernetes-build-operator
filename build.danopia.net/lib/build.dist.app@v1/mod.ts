export * from "./structs.ts";

// Autogenerated API file for BuildDistAppV1
import * as c from "https://deno.land/x/kubernetes_apis@v0.3.2/common.ts";
import * as operations from "https://deno.land/x/kubernetes_apis@v0.3.2/operations.ts";
import * as MetaV1 from "https://deno.land/x/kubernetes_apis@v0.3.2/builtin/meta@v1/structs.ts";
import * as BuildDistAppV1 from "./structs.ts";

export class BuildDistAppV1Api {
  #client: c.RestClient;
  #root = "/apis/build.danopia.net/v1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  namespace(name: string) {
    return new BuildDistAppV1NamespacedApi(this.#client, name);
  }
  myNamespace() {
    if (!this.#client.defaultNamespace) throw new Error("No current namespace is set");
    return new BuildDistAppV1NamespacedApi(this.#client, this.#client.defaultNamespace);
  }

  async getBuildListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}builds`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuildList(resp);
  }

  async watchBuildListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}builds`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(BuildDistAppV1.toBuild, MetaV1.toStatus));
  }

  async getBuildConfigListForAllNamespaces(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}buildconfigs`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuildConfigList(resp);
  }

  async watchBuildConfigListForAllNamespaces(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}buildconfigs`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(BuildDistAppV1.toBuildConfig, MetaV1.toStatus));
  }

}

export class BuildDistAppV1NamespacedApi {
  #client: c.RestClient
  #root: string
  constructor(client: c.RestClient, namespace: string) {
    this.#client = client;
    this.#root = `/apis/build.danopia.net/v1/namespaces/${namespace}/`;
  }

  async getBuildList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}builds`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuildList(resp);
  }

  async watchBuildList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}builds`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(BuildDistAppV1.toBuild, MetaV1.toStatus));
  }

  async createBuild(body: BuildDistAppV1.Build, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}builds`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: BuildDistAppV1.fromBuild(body),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuild(resp);
  }

  async deleteBuildList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}builds`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuildList(resp);
  }

  async getBuild(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}builds/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuild(resp);
  }

  async deleteBuild(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}builds/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return MetaV1.toStatus(resp);
  }

  async replaceBuild(name: string, body: BuildDistAppV1.Build, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}builds/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: BuildDistAppV1.fromBuild(body),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuild(resp);
  }

  async patchBuild(name: string, type: c.PatchType, body: BuildDistAppV1.Build | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}builds/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : BuildDistAppV1.fromBuild(body),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuild(resp);
  }

  async getBuildStatus(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}builds/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuild(resp);
  }

  async replaceBuildStatus(name: string, body: BuildDistAppV1.Build, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}builds/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: BuildDistAppV1.fromBuild(body),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuild(resp);
  }

  async patchBuildStatus(name: string, type: c.PatchType, body: BuildDistAppV1.Build | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}builds/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : BuildDistAppV1.fromBuild(body),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuild(resp);
  }

  async getBuildConfigList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}buildconfigs`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuildConfigList(resp);
  }

  async watchBuildConfigList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}buildconfigs`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(BuildDistAppV1.toBuildConfig, MetaV1.toStatus));
  }

  async createBuildConfig(body: BuildDistAppV1.BuildConfig, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}buildconfigs`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: BuildDistAppV1.fromBuildConfig(body),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuildConfig(resp);
  }

  async deleteBuildConfigList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}buildconfigs`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuildConfigList(resp);
  }

  async getBuildConfig(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}buildconfigs/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuildConfig(resp);
  }

  async deleteBuildConfig(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}buildconfigs/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return MetaV1.toStatus(resp);
  }

  async replaceBuildConfig(name: string, body: BuildDistAppV1.BuildConfig, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}buildconfigs/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: BuildDistAppV1.fromBuildConfig(body),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuildConfig(resp);
  }

  async patchBuildConfig(name: string, type: c.PatchType, body: BuildDistAppV1.BuildConfig | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}buildconfigs/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : BuildDistAppV1.fromBuildConfig(body),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuildConfig(resp);
  }

  async getBuildConfigStatus(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}buildconfigs/${name}/status`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuildConfig(resp);
  }

  async replaceBuildConfigStatus(name: string, body: BuildDistAppV1.BuildConfig, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}buildconfigs/${name}/status`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: BuildDistAppV1.fromBuildConfig(body),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuildConfig(resp);
  }

  async patchBuildConfigStatus(name: string, type: c.PatchType, body: BuildDistAppV1.BuildConfig | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}buildconfigs/${name}/status`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : BuildDistAppV1.fromBuildConfig(body),
      abortSignal: opts.abortSignal,
    });
    return BuildDistAppV1.toBuildConfig(resp);
  }

}
