export * from "./structs.ts";

// Autogenerated API file for CloudydenoGithubIoV1
import * as c from "https://deno.land/x/kubernetes_apis@v0.4.0/common.ts";
import * as operations from "https://deno.land/x/kubernetes_apis@v0.4.0/operations.ts";
import * as MetaV1 from "https://deno.land/x/kubernetes_apis@v0.4.0/builtin/meta@v1/structs.ts";
import * as CloudydenoGithubIoV1 from "./structs.ts";

export class CloudydenoGithubIoV1Api {
  #client: c.RestClient;
  #root = "/apis/cloudydeno.github.io/v1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  async getBlockDeviceList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}blockdevices`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CloudydenoGithubIoV1.toBlockDeviceList(resp);
  }

  async watchBlockDeviceList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}blockdevices`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(CloudydenoGithubIoV1.toBlockDevice, MetaV1.toStatus));
  }

  async createBlockDevice(body: CloudydenoGithubIoV1.BlockDevice, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}blockdevices`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CloudydenoGithubIoV1.fromBlockDevice(body),
      abortSignal: opts.abortSignal,
    });
    return CloudydenoGithubIoV1.toBlockDevice(resp);
  }

  async deleteBlockDeviceList(opts: operations.DeleteListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}blockdevices`,
      expectJson: true,
      querystring: operations.formatDeleteListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return CloudydenoGithubIoV1.toBlockDeviceList(resp);
  }

  async getBlockDevice(name: string, opts: operations.NoOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}blockdevices/${name}`,
      expectJson: true,
      abortSignal: opts.abortSignal,
    });
    return CloudydenoGithubIoV1.toBlockDevice(resp);
  }

  async deleteBlockDevice(name: string, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}blockdevices/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      abortSignal: opts.abortSignal,
    });
    if (c.isStatusKind(resp)) return MetaV1.toStatus(resp);
    return CloudydenoGithubIoV1.toBlockDevice(resp);
  }

  async replaceBlockDevice(name: string, body: CloudydenoGithubIoV1.BlockDevice, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}blockdevices/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: CloudydenoGithubIoV1.fromBlockDevice(body),
      abortSignal: opts.abortSignal,
    });
    return CloudydenoGithubIoV1.toBlockDevice(resp);
  }

  async patchBlockDevice(name: string, type: c.PatchType, body: CloudydenoGithubIoV1.BlockDevice | c.JsonPatch, opts: operations.PatchOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}blockdevices/${name}`,
      expectJson: true,
      querystring: operations.formatPatchOpts(opts),
      contentType: c.getPatchContentType(type),
      bodyJson: Array.isArray(body) ? body : CloudydenoGithubIoV1.fromBlockDevice(body),
      abortSignal: opts.abortSignal,
    });
    return CloudydenoGithubIoV1.toBlockDevice(resp);
  }

}
